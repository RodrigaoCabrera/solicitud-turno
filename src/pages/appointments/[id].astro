---
import Layout from "@/layouts/Layout.astro";
import Check from "@/astro-components/icons/Check.astro";
import Typography from "@/astro-components/UI/Typography.astro";

import { format } from "@formkit/tempo";
import Button from "@/astro-components/UI/Button.astro";
import { Appointments, Patients, Tutors, ProfessionalProfile } from "db/schema";
import { db } from "db/db";
import { eq } from "drizzle-orm";
import InfoDateCard from "@/astro-components/UI/InfoDateCard.astro";
interface Props {
  id: string;
}
const { id } = Astro.params;

if (!id) return Astro.redirect("/404");

// En el componente de la página de destino
const appointmentDataCookie = Astro.cookies.get("appointmentDataCookie");
let appoinmentData;
if (appointmentDataCookie) {
  try {
    appoinmentData = JSON.parse(
      decodeURIComponent(appointmentDataCookie.value)
    );

    // Elimina la cookie después de usarla
    Astro.cookies.delete("appointmentappoinmentData");
  } catch (error) {
    console.error("Error al parsear los datos de la cookie:", error);
  }
}

if (!appoinmentData) {
  // Get appointment info
  appoinmentData = await db
    .select({
      date: Appointments.date,
      time: Appointments.time,
      modality: Appointments.modality,
      patientName: Patients.firstName,
      patientLastName: Patients.lastName,
      healthInsurance: Patients.healthInsurance,
      tutorName: Tutors.firstName,
      tutorLastName: Tutors.lastName,
      address: ProfessionalProfile.address,
    })
    .from(Appointments)
    .where(eq(Appointments.id, id))
    .innerJoin(Patients, eq(Appointments.patientId, Patients.id))
    .innerJoin(Tutors, eq(Patients.tutorId, Tutors.id))
    .innerJoin(
      ProfessionalProfile,
      eq(Appointments.professionalId, ProfessionalProfile.id)
    );

  if (appoinmentData.length <= 0) return Astro.redirect("/404");
  appoinmentData = appoinmentData[0];
}

const {
  date,
  time,
  modality,
  patientName,
  patientLastName,
  healthInsurance,
  tutorName,
  tutorLastName,
  address,
} = appoinmentData;

const list = [
  {
    iconPath: "../../astro-components/icons/CalendarIcon.astro",
    value: format(date || "", "full", "es"),
  },
  {
    iconPath: "../../astro-components/icons/Clock.astro",
    value: `${time}h`,
  },
  {
    iconPath: "../../astro-components/icons/Office.astro",
    value:
      modality === "online" ? "Online" : `Presencial - Consultorio: ${address}`,
  },
  {
    iconPath: "../../astro-components/icons/HealthInsurance.astro",
    value: healthInsurance,
  },
];
---

<Layout title="Turno agendado">
  <InfoDateCard
    list={list}
    classes="flex flex-col items-center justify-center w-full rounded-lg bg-[#F8F8F8] py-4 mt-3"
  >
    <span class="w-fit" slot="check-icon">
      <Check width="63" height="63" viewBox="0 0 63 63" fill="none" />
    </span>
    <Typography
      as="h1"
      variant="l"
      color="darkText"
      class="font-semibold mt-3 mb-2"
      slot="title">¡Listo!</Typography
    >
    <Typography
      as="p"
      variant="m"
      color="darkText"
      class="font-medium mb-2 max-w-[220px] text-center leading-4"
      slot="subtitle"
      >Ya agendaste tu turno con la Dra. Carolina Fagalde.</Typography
    >
    <Fragment slot="list-items-after">
      <div
        class="flex gap-1 items-center pt-2 mt-2 border-t-[1px] border-solid border-black"
      >
        <Typography as="span" variant="sm" color="black">
          Paciente:
        </Typography>
        <Typography as="span" variant="sm" color="black">
          {patientName}
        </Typography>
        <Typography as="span" variant="sm" color="black">
          {patientLastName}
        </Typography>
      </div>
      <div class="flex gap-1 items-center">
        <Typography as="span" variant="sm" color="black"> Tutor: </Typography>
        <Typography as="span" variant="sm" color="black">
          {tutorName}
        </Typography>
        <Typography as="span" variant="sm" color="black">
          {tutorLastName}
        </Typography>
      </div>
    </Fragment>
  </InfoDateCard>
  <section>
    <article>
      <Typography
        as="p"
        variant="xs"
        color="darkText"
        class="mb-2 mt-1 max-w-[250px] text-center leading-4 mx-auto"
        >Recibirás la confirmación de tu turno por mail y podrás agendarlo en
        Google Calendar. Te pedimos llegar con unos 10 o 15min de antelación
        para evitar contratiempos.
      </Typography>
    </article>
    <article class="mt-3">
      <Typography
        as="p"
        variant="xs"
        color="darkText"
        class="mb-2 max-w-[250px] text-center leading-4 mx-auto"
        >En el caso de tener que abonar la consulta podrás gestionar el pago
        directamente en el consultorio.
      </Typography>
    </article>

    <Button as="a" variant="secondary" class="mt-5 mb-2 flex" href="/">
      <Typography
        as="span"
        variant="sm"
        color="darkText"
        class="uppercase mx-auto"
        >Volver al inicio
      </Typography>
    </Button>
    <Button as="a" class="flex" variant="ghost" href="/cancelar-turno">
      <Typography
        as="span"
        variant="xs"
        color="darkText"
        class="text-center mx-auto"
        >Cancelar turno
      </Typography>
    </Button>
  </section>
</Layout>
<script>
  // Clean the localStorage
  window.addEventListener("DOMContentLoaded", (event) => {
    localStorage.removeItem("storedDate");
    localStorage.removeItem("storedTime");
    localStorage.removeItem("professionalId");
    localStorage.removeItem("professionalAddress");
    localStorage.removeItem("modality");
  });
</script>
