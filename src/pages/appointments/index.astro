---
import { Resend } from "resend";
import AppointmentCreated from "@/components/emails-templates/AppointmentCreated.tsx";

/* Services */
import registerAppointment from "../../services/registerAppointment.ts";
import sendEmail from "../../services/sendEmail.ts";
import generateGoogleCalendarLink from "../../services/generateGoogleCalendarLink.ts";

import { flatten, safeParse } from "valibot";
import { appoinmentDataSchema } from "@/utils/appoinmentDataSchema";
import GoBack from "@/astro-components/UI/GoBack.astro";
import Layout from "@/layouts/Layout.astro";
import FormPatientSection from "@/sections/appointments/FormPatientSection.astro";
import FormTutorSection from "@/sections/appointments/FormTutorSection.astro";
import Button from "@/astro-components/UI/Button.astro";
import Typography from "@/astro-components/UI/Typography.astro";

let errors;
let formData = {
  patientFirstName: "",
  patientLastName: "",
  patientDni: "",
  patientAge: "",
  patientGender: "",
  patientType: "",
  healthInsurance: "",
  tutorFirstName: "",
  tutorLastName: "",
  tutorEmail: "",
  tutorDni: "",
  tutorPhone: "",
  relationshipWithThePatient: "",
  date: "",
  time: "",
  professionalId: "",
  professionalName: "",
  professionalLastName: "",
  professionalAddress: "",
  professionalSessionTime: "",
  modality: "",
};

async function handlePostRequest() {
  try {
    const form = await Astro.request.formData();
    formData = {
      patientFirstName: form.get("patientFirstName")?.toString() || "",
      patientLastName: form.get("patientLastName")?.toString() || "",
      patientDni: form.get("patientDni")?.toString().replaceAll(/ /g, "") || "",
      patientAge: form.get("patientAge")?.toString().replaceAll(/ /g, "") || "",
      patientGender: form.get("patientGender")?.toString() || "",
      patientType: form.get("patientType")?.toString() || "",
      healthInsurance: form.get("healthInsurance")?.toString() || "",
      tutorFirstName: form.get("tutorFirstName")?.toString() || "",
      tutorLastName: form.get("tutorLastName")?.toString() || "",
      tutorEmail: form.get("tutorEmail")?.toString() || "",
      tutorDni: form.get("tutorDni")?.toString().replaceAll(/ /g, "") || "",
      tutorPhone: form.get("tutorPhone")?.toString().replaceAll(/ /g, "") || "",
      relationshipWithThePatient:
        form.get("relationshipWithThePatient")?.toString() || "",
      date: form.get("date")?.toString().replaceAll(/ /g, "") || "",
      time: form.get("time")?.toString().replaceAll(/ /g, "") || "",
      professionalId: form.get("professionalId")?.toString() || "",
      professionalName: form.get("professionalName")?.toString() || "",
      professionalLastName: form.get("professionalLastName")?.toString() || "",
      professionalAddress: form.get("professionalAddress")?.toString() || "",
      professionalSessionTime:
        form.get("professionalSessionTime")?.toString() || "",
      modality: form.get("modality")?.toString() || "",
    };

    const patient = {
      firstName: formData.patientFirstName,
      lastName: formData.patientLastName,
      dni: formData.patientDni,
      age: Number(formData.patientAge),
      gender: formData.patientGender,
      type: formData.patientType,
      healthInsurance: formData.healthInsurance,
    };

    const tutor = {
      firstName: formData.tutorFirstName,
      lastName: formData.tutorLastName,
      email: formData.tutorEmail,
      phone: formData.tutorPhone,
      dni: formData.tutorDni,
      relationshipWithThePatient: formData.relationshipWithThePatient,
    };

    const appointment = {
      date: formData.date,
      time: formData.time,
      professionalId: formData.professionalId,
      modality: formData.modality,
    };

    const appointmentRequest = {
      patient,
      tutor,
      appointment,
    };

    const professionalData = {
      id: formData.professionalId,
      firstName: formData.professionalName,
      lastName: formData.professionalLastName,
      address: formData.professionalAddress,
      sessionTime: Number(formData.professionalSessionTime),
    };

    // Validate appointment data
    const { success, output, issues } = safeParse(
      appoinmentDataSchema,
      appointmentRequest
    );

    if (!success) {
      errors = flatten<typeof appoinmentDataSchema>(issues).nested;
      console.log(errors);
      return;
    }

    const appointmentResult = await registerAppointment(
      output,
      Astro.url.origin
    );
    // Generate google calendar link
    const calendarLink = generateGoogleCalendarLink({
      appointment: output.appointment,
      professionalData,
      guest: output.tutor.email,
    });

    try {
      await sendEmail(output, calendarLink);
    } catch (emailError) {
      console.error("Failed to send email:", emailError);
      // TODO: Add email to pending stack
      //await addToPendingEmails(appointmentResult.id, output);
    }
    return Astro.redirect(`/appointments/${appointmentResult.id}`);
  } catch (e) {
    if (e instanceof Error) {
      console.log(e.message);
      return new Response("Error", { status: 400 });
    }
  }
}

if (Astro.request.method === "POST") {
  const result = await handlePostRequest();
  if (result) {
    return result;
  }
}
---

<Layout title="Formulario de solicitud de turno">
  <section>
    <GoBack label="Regresar" to="/calendar" />

    <form method="POST" class="mt-3">
      <FormPatientSection formData={formData} errors={errors} />

      <FormTutorSection formData={formData} errors={errors} />

      <!-- Hidden appointment fields -->
      <div class="hidden">
        <input
          type="text"
          id="professionalId"
          name="professionalId"
          value={formData.professionalId}
        />
        <input type="text" id="date" name="date" value={formData.date} />
        <input type="text" id="time" name="time" value={formData.time} />
        <input
          type="text"
          id="modality"
          name="modality"
          value={formData.modality}
        />
        <input
          type="text"
          id="professionalName"
          name="professionalName"
          value={formData.professionalName}
        />
        <input
          type="text"
          id="professionalLastName"
          name="professionalLastName"
          value={formData.professionalLastName}
        />
        <input
          type="text"
          id="professionalAddress"
          name="professionalAddress"
          value={formData.professionalAddress}
        />
        <input
          type="text"
          id="professionalSessionTime"
          name="professionalSessionTime"
          value={formData.professionalSessionTime}
        />
      </div>
      <Button as="button" type="submit" class="w-full mt-3"
        ><Typography
          as="span"
          variant="sm"
          color="black"
          class="font-semibold uppercase"
        >
          Finalizar
        </Typography></Button
      >
    </form>
  </section>
</Layout>

<script>
  // Fuction to clear the error message
  function clearError(inputId: string) {
    const errorSpan = document.getElementById(inputId + "Error");

    if (errorSpan) {
      errorSpan.textContent = "";
    }
  }

  // Add event listeners to the input fields
  document.querySelectorAll("input, select").forEach((input) => {
    input.addEventListener("input", () => clearError(input.id));
  });

  function addDateFromLocalStorage() {
    const date = localStorage.getItem("storedDate");
    const time = localStorage.getItem("storedTime");
    const modality = localStorage.getItem("modality");
    const professionalData = JSON.parse(
      localStorage.getItem("professionalData") || ""
    );

    const $dateInput = document.querySelector("#date") as HTMLInputElement;
    const $timeInput = document.querySelector("#time") as HTMLInputElement;

    const $professionalIdInput = document.querySelector(
      "#professionalId"
    ) as HTMLInputElement;

    const $modalityInput = document.querySelector(
      "#modality"
    ) as HTMLInputElement;
    const $professionalName = document.querySelector(
      "#professionalName"
    ) as HTMLInputElement;
    const $professionalLastName = document.querySelector(
      "#professionalLastName"
    ) as HTMLInputElement;
    const $professionalAddress = document.querySelector(
      "#professionalAddress"
    ) as HTMLInputElement;
    const $professionalSessionTime = document.querySelector(
      "#professionalSessionTime"
    ) as HTMLInputElement;

    if (
      date &&
      time &&
      modality &&
      professionalData.id &&
      professionalData.firstName &&
      professionalData.lastName &&
      professionalData.address &&
      professionalData.sessionTime
    ) {
      console.log({ professionalData });
      $dateInput.value = date;
      $timeInput.value = time;
      $modalityInput.value = modality;
      $professionalIdInput.value = professionalData.id;
      $professionalName.value = professionalData.firstName;
      $professionalLastName.value = professionalData.lastName;
      $professionalAddress.value = professionalData.address;
      $professionalSessionTime.value = professionalData.sessionTime;
    }
  }
  addDateFromLocalStorage();
</script>
