---
import { flatten, safeParse } from "valibot";
import { appoinmentDataSchema } from "@/utils/appoinmentDataSchema";
import InputError from "@/astro-components/UI/InputError.astro";
import { format, parse, date, offset, applyOffset } from "@formkit/tempo";

let errors;
let formData = {
  patientFirstName: "",
  patientLastName: "",
  patientDni: "",
  patientAge: "",
  patientGender: "",
  patientType: "",
  healthInsurance: "",
  tutorFirstName: "",
  tutorLastName: "",
  tutorEmail: "",
  tutorDni: "",
  tutorPhone: "",
  relationshipWithThePatient: "",
  date: "",
  professionalId: "",
  modality: "",
};

async function handlePostRequest() {
  try {
    const form = await Astro.request.formData();
    formData = {
      patientFirstName: form.get("patientFirstName")?.toString() || "",
      patientLastName: form.get("patientLastName")?.toString() || "",
      patientDni: form.get("patientDni")?.toString() || "",
      patientAge: form.get("patientAge")?.toString() || "",
      patientGender: form.get("patientGender")?.toString() || "",
      patientType: form.get("patientType")?.toString() || "",
      healthInsurance: form.get("healthInsurance")?.toString() || "",
      tutorFirstName: form.get("tutorFirstName")?.toString() || "",
      tutorLastName: form.get("tutorLastName")?.toString() || "",
      tutorEmail: form.get("tutorEmail")?.toString() || "",
      tutorDni: form.get("tutorDni")?.toString() || "",
      tutorPhone: form.get("tutorPhone")?.toString() || "",
      relationshipWithThePatient:
        form.get("relationshipWithThePatient")?.toString() || "",
      date: form.get("date")?.toString() || "",
      professionalId: form.get("professionalId")?.toString() || "",
      modality: form.get("modality")?.toString() || "",
    };

    const patient = {
      firstName: formData.patientFirstName,
      lastName: formData.patientLastName,
      dni: formData.patientDni,
      age: Number(formData.patientAge),
      gender: formData.patientGender,
      type: formData.patientType,
      healthInsurance: formData.healthInsurance,
    };

    const tutor = {
      firstName: formData.tutorFirstName,
      lastName: formData.tutorLastName,
      email: formData.tutorEmail,
      phone: formData.tutorPhone,
      dni: formData.tutorDni,
      relationshipWithThePatient: formData.relationshipWithThePatient,
    };

    const appointmentDate = formData.date;
    const parsedDate = applyOffset(parse(appointmentDate), "-0300");

    const appointment = {
      date: parsedDate,
      professionalId: formData.professionalId,
      modality: formData.modality,
    };

    const appointmentRequest = {
      patient,
      tutor,
      appointment,
    };

    // Validate appointment data
    const { success, output, issues } = safeParse(
      appoinmentDataSchema,
      appointmentRequest
    );

    if (!success) {
      errors = flatten<typeof appoinmentDataSchema>(issues).nested;
      console.log(errors);
      return;
    }

    const response = await fetch(`${Astro.url.origin}/api/appointments`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(output),
    });

    const data = await response.json();
    if (!response.ok) {
      console.log(data);
      errors = { api: "Error al procesar la solicitud" };
    }
    return Astro.redirect(`/appointments/${data.id}`);
  } catch (e) {
    if (e instanceof Error) {
      console.log(e.message);
    }
  }
}

if (Astro.request.method === "POST") {
  const result = await handlePostRequest();
  if (result) {
    return result;
  }
}
---

<form method="POST">
  <!--  TODO: Create componente for each form type -->
  <h3>Datos del Paciente</h3>
  <div>
    <label for="patientFirstName">Nombre:</label>
    <input
      type="text"
      id="patientFirstName"
      name="patientFirstName"
      value={formData.patientFirstName}
      required
    />
    <InputError
      errors={errors}
      erroKey="patient.firstName"
      errorId="patientFirstNameError"
    />
  </div>
  <div>
    <label for="patientLastName">Apellido:</label>
    <input
      type="text"
      id="patientLastName"
      name="patientLastName"
      value={formData.patientLastName}
      required
    />
    <InputError
      errors={errors}
      erroKey="patient.lastName"
      errorId="patientLastNameError"
    />
  </div>
  <div>
    <label for="patientDni">DNI:</label>
    <input
      type="text"
      id="patientDni"
      name="patientDni"
      value={formData.patientDni}
    />
    <InputError
      errors={errors}
      erroKey="patient.dni"
      errorId="patientDniError"
    />
  </div>
  <div>
    <label for="patientAge">Edad:</label>
    <input
      type="tel"
      id="patientAge"
      name="patientAge"
      value={formData.patientAge}
    />
    <InputError
      errors={errors}
      erroKey="patient.age"
      errorId="patientAgeError"
    />
  </div>
  <div>
    <label for="patientGender">Género:</label>
    <select name="patientGender" id="patientGender">
      <option value="female" selected={formData.patientGender === "female"}
        >Femenino</option
      >
      <option value="male" selected={formData.patientGender === "male"}
        >Masculino</option
      >
      <option value="another" selected={formData.patientGender === "another"}
        >Otro</option
      >
    </select>
    <InputError
      errors={errors}
      erroKey="patient.gender"
      errorId="patientGenderError"
    />
  </div>

  <div>
    <label for="healthInsurance">Seguro Médico</label>
    <input
      type="text"
      id="healthInsurance"
      name="healthInsurance"
      value={formData.healthInsurance}
    />
    <InputError
      errors={errors}
      erroKey="patient.healthInsurance"
      errorId="patientHealthInsuranceError"
    />
  </div>

  <div>
    <label for="regularPatient">Paciente regular</label>
    <input
      type="radio"
      name="patientType"
      id="regularPatient"
      value="Paciente regular"
      checked={formData.patientType === "Paciente regular"}
    />
    <label for="newPatient">Es la primera vez</label>
    <input
      type="radio"
      name="patientType"
      id="newPatient"
      value="Paciente nuevo"
      checked={formData.patientType === "Paciente nuevo"}
    />
    <InputError
      errors={errors}
      erroKey="patient.type"
      errorId="patientTypeError"
    />
  </div>

  <h3 class="mt-8">Datos del Tutor</h3>
  <div>
    <label for="tutorFirstName">Nombre:</label>
    <input
      type="text"
      id="tutorFirstName"
      name="tutorFirstName"
      value={formData.tutorFirstName}
    />
    <InputError
      errors={errors}
      erroKey="tutor.firstName"
      errorId="tutorFirstNameError"
    />
  </div>
  <div>
    <label for="tutorLastName">Apellido:</label>
    <input
      type="text"
      id="tutorLastName"
      name="tutorLastName"
      value={formData.tutorLastName}
    />
    <InputError
      errors={errors}
      erroKey="tutor.lastName"
      errorId="tutorLastNameError"
    />
  </div>
  <div>
    <label for="tutorDni">DNI:</label>
    <input
      type="text"
      id="tutorDni"
      name="tutorDni"
      value={formData.tutorDni}
    />
    <InputError errors={errors} erroKey="tutor.dni" errorId="tutorDniError" />
  </div>
  <div>
    <label for="tutorEmail">Email:</label>
    <input
      type="email"
      id="tutorEmail"
      name="tutorEmail"
      value={formData.tutorEmail}
    />
    <InputError
      errors={errors}
      erroKey="tutor.email"
      errorId="tutorEmailError"
    />
  </div>
  <div>
    <label for="tutorPhone">Número de teléfono:</label>
    <input
      type="text"
      id="tutorPhone"
      name="tutorPhone"
      value={formData.tutorPhone}
    />
    <InputError
      errors={errors}
      erroKey="tutor.phone"
      errorId="tutorPhoneError"
    />
  </div>
  <div>
    <label for="relationshipWithThePatient">Vínculo con el paciente:</label>
    <input
      type="text"
      id="relationshipWithThePatient"
      name="relationshipWithThePatient"
      value={formData.relationshipWithThePatient}
    />
    <InputError
      errors={errors}
      erroKey="tutor.relationshipWithThePatient"
      errorId="relationshipWithThePatientError"
    />
  </div>

  <div>
    <input
      type="text"
      id="professionalId"
      name="professionalId"
      value={formData.professionalId}
    />
    <input type="text" id="date" name="date" value={formData.date} />
    <input
      type="text"
      id="modality"
      name="modality"
      value={formData.modality}
    />
  </div>

  <div>
    <button type="submit">Enviar Solicitud</button>
  </div>
</form>

<script>
  // Fuction to clear the error message
  function clearError(inputId: string) {
    const errorSpan = document.getElementById(inputId + "Error");

    if (errorSpan) {
      errorSpan.textContent = "";
    }
  }

  // Add event listeners to the input fields
  document.querySelectorAll("input, select").forEach((input) => {
    input.addEventListener("input", () => clearError(input.id));
  });

  function addDateFromLocalStorage() {
    const date = localStorage.getItem("storedDate");
    const professionalId = localStorage.getItem("professionalId");
    const modality = localStorage.getItem("modality");

    const $dateInput = document.querySelector("#date") as HTMLInputElement;
    const $professionalIdInput = document.querySelector(
      "#professionalId"
    ) as HTMLInputElement;

    const $modalityInput = document.querySelector(
      "#modality"
    ) as HTMLInputElement;

    if (date && professionalId && modality) {
      console.log(date);
      console.log(modality);
      $dateInput.value = date;
      $professionalIdInput.value = professionalId;
      $modalityInput.value = modality;
    }
  }
  addDateFromLocalStorage();
</script>
