---
import Item from "@/astro-components/UI/Item.astro";
import Typography from "@/astro-components/UI/Typography.astro";
import { Availability } from "astro:db";
import { db } from "astro:db";

interface OpenHours {
  days: number[];
  am: string;
  pm: string;
}
/* availability data from DB */
const availability = await db.select().from(Availability);

// Formated data for to group repeated available hours
let openHours: OpenHours[] = [];

for (let el of availability) {
  const am = `${el.startTimeAM}-${el.endTimeAM}`;
  const pm = `${el.startTimePM}-${el.endTimePM}`;

  const existOpenHours = openHours.find(
    (openHour: OpenHours) => openHour.am === am && openHour.pm === pm
  );

  if (!existOpenHours) {
    openHours.push({
      days: [el.dayOfWeek],
      am,
      pm,
    });
    continue;
  }

  existOpenHours.days = [...existOpenHours.days, el.dayOfWeek];
}

// Get day
const daysOfWeek = {
  0: "Domingo",
  1: "Lunes",
  2: "Martes",
  3: "Miércoles",
  4: "Jueves",
  5: "Viernes",
  6: "Sábado",
};

// Determinate if days are secuencial
const areSecuencialDays = (daysArr: number[]) => {
  // When the days array is smaller or equal than 1, return that days are not secuencial
  if (daysArr.length <= 1) {
    return false;
  }

  // We determinate if the days array is secuencial through of a counter
  let count = null;
  for (let day of daysArr) {
    if (count == null) {
      count = day;
      continue;
    }

    if (count + 1 !== day) {
      return false;
    }
    count++;
  }

  return true;
};
const getDaysRange = (days: number[]) => {
  let availebaleDaysLabel: string | string[] = [];

  // if days are secuencial it return only the first and last day
  if (areSecuencialDays(days)) {
    const firstElement = days[0] as keyof typeof daysOfWeek;
    const lastElement = days.at(-1) as keyof typeof daysOfWeek;
    availebaleDaysLabel = `${daysOfWeek[firstElement]} a ${daysOfWeek[lastElement]}`;
    return availebaleDaysLabel;
  }

  // If days are not secuencial, it return each day
  for (let day of days) {
    const key = day as keyof typeof daysOfWeek;
    availebaleDaysLabel.push(daysOfWeek[key]);
  }
  return availebaleDaysLabel.join(", ");
};
---

<article>
  <Typography as="h2" variant="sm" color="darkText">
    Horarios de atención
  </Typography>
  {
    (
      <section>
        {openHours.map((availableDays) => (
          <Typography as="p" variant="xs" color="lightText">
            <span>{getDaysRange(availableDays.days)}</span> |
            <span>{availableDays.am} AM</span>
            <span>{availableDays.pm} PM</span>
          </Typography>
        ))}
      </section>
    )
  }
</article>
